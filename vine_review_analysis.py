# -*- coding: utf-8 -*-
"""Vine_Review_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H_irFwz5OgnvbbKKglctt0iEPjl0AcCe
"""

import os
# Find the latest version of spark 3.0 from http://www.apache.org/dist/spark/ and enter as the spark version
# For example:
# spark_version = 'spark-3.0.3'
spark_version = 'spark-3.0.3'
os.environ['SPARK_VERSION']=spark_version

# Install Spark and Java
!apt-get update
!apt-get install openjdk-11-jdk-headless -qq > /dev/null
!wget -q http://www.apache.org/dist/spark/$SPARK_VERSION/$SPARK_VERSION-bin-hadoop2.7.tgz
!tar xf $SPARK_VERSION-bin-hadoop2.7.tgz
!pip install -q findspark

# Set Environment Variables
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-11-openjdk-amd64"
os.environ["SPARK_HOME"] = f"/content/{spark_version}-bin-hadoop2.7"

# Start a SparkSession
import findspark
findspark.init()

"""### Load Amazon Data into Spark DataFrame"""

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName("M16-Amazon-Challenge").config("spark.driver.extraClassPath","/content/postgresql-42.2.16.jar").getOrCreate()

from pyspark import SparkFiles
url = "https://s3.amazonaws.com/amazon-reviews-pds/tsv/amazon_reviews_us_Lawn_and_Garden_v1_00.tsv.gz"
spark.sparkContext.addFile(url)
df = spark.read.option("encoding", "UTF-8").csv(SparkFiles.get(""), sep="\t", header=True, inferSchema=True)
df.show()

"""### Create VINE DataFrame for Deliverable 2 Analysis"""

from pyspark.sql.functions import to_date
# Read in the Review dataset as a DataFrame

# Create the vine_table. DataFrame

vine_df = df.select(["review_id", "star_rating", "helpful_votes", "total_votes", "vine", "verified_purchase"])
vine_df.show()

"""### Deliverable 2: Determine Bias of Vine Reviews"""

# 1. Filter the data and create a new DataFrame or table to retrieve all the rows
#    where the total_votes count is equal to or greater than 20 to pick reviews 
#    that are more likely to be helpful and to avoid having division by zero errors later on

vine_df_filtered = vine_df.filter(vine_df.total_votes >= "20")
vine_df_filtered.show()

# 2. Filter the new DataFrame or table created in Step 1 and create a new DataFrame
#    or table to retrieve all the rows where the number of helpful_votes divided by
#    total_votes is equal to or greater than 50%.

help_total_50_plus = vine_df_filtered.filter(vine_df_filtered.helpful_votes/vine_df_filtered.total_votes >= .5)
help_total_50_plus.show()

# 3. Filter the DataFrame or table created in Step 2, and create a new DataFrame or
#    table that retrieves all the rows where a review was written as part of the 
#    Vine program (paid), vine == 'Y'.

helpful_paid = help_total_50_plus.filter(help_total_50_plus.vine == 'Y')
helpful_paid.show()

# 4. Repeat Step 3, but this time retrieve all the rows where the review was not part
#    of the Vine program (unpaid), vine == 'N'.

helpful_unpaid = help_total_50_plus.filter(help_total_50_plus.vine == 'N')
helpful_unpaid.show()

# 5. Determine the total number of reviews, the number of 5-star reviews, and the
#    percentage of 5-star reviews for the two types of review (paid vs unpaid).

total_reviews = help_total_50_plus.count()
print("Total Reviews = ", total_reviews)

total_paid_5 = helpful_paid.filter(helpful_paid.star_rating == '5').count()
percent_paid_5 = total_paid_5/total_reviews*100
print("Total Paid 5 Star Reviews = ", total_paid_5, "(",percent_paid_5,"%)")

total_unpaid_5 = helpful_unpaid.filter(helpful_unpaid.star_rating == '5').count()
percent_unpaid_5 = total_unpaid_5/total_reviews*100
print("Total Unpaid 5 Star Reviews = ", total_unpaid_5, "(",percent_unpaid_5,"%)")